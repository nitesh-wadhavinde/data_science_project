open anaconda prompt
cd project path
code . which opens vs code instance
now open terminal in vscode
creating new environment
conda create -p venv python==3.8 -y
cls  clear screen
conda activate venv/

next we need to clone this repo and sync with github


this ode would be available on GitHub once you create repo:
echo "# data_science_project" >> README.md
git init
git add README.md

now use git config user.email "email"
git config user.name "username"

git commit -m "first commit"


now we need to push this file

git branch -M main
git remote add origin https://github.com/nitesh-wadhavinde/data_science_project.git
git push -u origin main


goto GitHub and create a new file with name .gitignore hen choose python and commit changes

now to get updated stuff on remote use git pull

now in vscode create a new file setup.py and requirements.txt
with help of setup.py we will be able to build our application as a package and even deploy in pypi

in setup.py:
from setuptools import find_packages,setup
from typing import List
def get_requirements(file_path:str)->List[str]:
	'''
	this func will return list of requirements
	'''
	requirements=[]
	with open(file_path) as file_obj:
		requirements=file_obj.readlines()
		requirements=[req.replace("\n","") for req in requirements]
	

setup(
name='mlproject',
version='0.0.1',
author='Nitesh',
author_email='niteshwadhavinde.nw@gmail.com',
packages=find_packages(),
install_requires=get_requirements('requirements.txt')
)



for setup.py how will it be able to able to find packages and all
for this what we do is create a src folder with __init__.py


so when we are trying to install all in requirements.txt it should run setup.py
to that we add 
-e . in requirements.txt 

now to make sure that the lit we made before removes this -e .
we add below condition o our function get_req
if '-e .' in requirements:
 requirements.remove('-e .')



2.Src folder with package
pip install -r requirements.txt
done

now git add.

git commit -m setup
git push -u origin main


###############################################################################################################
Now we have project structure and logging and exception handling


in src create folder components and under that create __init__.py as it can bei mported as package




components are like all the modules we are going to create like initially we need code to do data ingestion which basically to read data from a db
create another folder named pipeline which has two pipelines training.py and prediction.py, init

now inside src we need to create 3 essential py files
1.logger.py
2.exception.py
3.utils.py(functionalities that can be used anywhere in a database)


now lets first write exception.py
for that search exceptions python documentation

import sys
from src.logger import logging

def error_message_detail(error,error_detail:sys):
    _,_,exc_tb=error_detail.exc_info()
    file_name=exc_tb.tb_frame.f_code.co_filename
    error_message="Error occured in python script name [{0}] line number [{1}] error message[{2}]".format(
     file_name,exc_tb.tb_lineno,str(error))

    return error_message

    

class CustomException(Exception):
    def __init__(self,error_message,error_detail:sys):
        super().__init__(error_message)
        self.error_message=error_message_detail(error_message,error_detail=error_detail)
    
    def __str__(self):
        return self.error_message



now comes the logger.py
 
used to log errors
import logging
import os
from datetime import datetime

LOG_FILE=f"{datetime.now().strftime('%m_%d_%Y_%H_%M_%S')}.log"

logs_path=os.path.join(os.getcwd(),"logs",LOG_FILE)


#NOW TO KEEP appending logs
os.makedirs(logs_path,exist_ok=True)

LOG_FILE_PATH=os.path.join(logs_path,LOG_FILE)



logging.basicConfig(
    filename=LOG_FILE_PATH,
    format="[ %(asctime)s ] %(lineno)d %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,


)


git add .
git commit -m "logging exception"








